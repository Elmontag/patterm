"""Pydantic schemas for the Patterm MVP API."""
from datetime import datetime, date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, EmailStr, Field


class Specialty(str, Enum):
    """Medical specialties supported by the MVP."""

    cardiology = "cardiology"
    dermatology = "dermatology"
    general_practice = "general_practice"
    orthopedics = "orthopedics"
    pediatrics = "pediatrics"


class FacilityType(str, Enum):
    """Supported facility categories."""

    clinic = "clinic"
    practice = "practice"
    group_practice = "group_practice"


class OpeningHours(BaseModel):
    """Simple representation of a weekly opening window."""

    weekday: int = Field(
        ..., ge=0, le=6, description="Weekday number where Monday is 0 and Sunday is 6"
    )
    opens_at: str = Field(
        ..., pattern=r"^\d{2}:\d{2}$", description="Opening time HH:MM"
    )
    closes_at: str = Field(
        ..., pattern=r"^\d{2}:\d{2}$", description="Closing time HH:MM"
    )


class ClinicDepartment(BaseModel):
    """Department structure for clinics including linked providers."""

    id: str
    name: str
    specialties: List[Specialty]
    provider_ids: List[str] = Field(default_factory=list)
    providers: List["ProviderProfile"] = Field(
        default_factory=list,
        description="Resolved provider profiles belonging to the department.",
    )


class FacilitySummary(BaseModel):
    """Shared public information for all facility types."""

    id: str = Field(..., description="Stable identifier of the facility")
    name: str
    facility_type: FacilityType
    specialties: List[Specialty]
    city: str
    street: str
    postal_code: str
    contact_email: EmailStr
    phone_number: str


class FacilityCreate(BaseModel):
    """Payload for creating a new facility. The identifier is generated by the system."""

    name: str
    facility_type: FacilityType
    specialties: List[Specialty]
    city: str
    street: str
    postal_code: str
    contact_email: EmailStr
    phone_number: str
    opening_hours: List[OpeningHours] = Field(default_factory=list)


class FacilityDetail(FacilitySummary):
    """Detailed representation including structure and governance."""

    opening_hours: List[OpeningHours] = Field(default_factory=list)
    departments: List[ClinicDepartment] = Field(default_factory=list)
    providers: List["ProviderProfile"] = Field(default_factory=list)
    owners: List[str] = Field(default_factory=list)


class SlotStatus(str, Enum):
    """Lifecycle status of appointment slots."""

    open = "open"
    booked = "booked"
    cancelled = "cancelled"


class AppointmentSlot(BaseModel):
    """A bookable appointment slot."""

    id: str
    facility_id: str
    department_id: Optional[str] = Field(
        default=None,
        description="Department identifier (clinics only) for which the slot is offered.",
    )
    provider_id: Optional[str] = Field(
        default=None,
        description="Provider responsible for the appointment.",
    )
    provider_name: Optional[str] = Field(
        default=None,
        description="Human readable provider name resolved for the slot.",
    )
    start: datetime
    end: datetime
    is_virtual: bool = Field(
        False,
        description="Whether the appointment takes place virtually (telemedicine)",
    )
    status: SlotStatus = Field(default=SlotStatus.open, description="Lifecycle status of the slot")
    booked_patient_id: Optional[str] = Field(
        default=None, description="Identifier of the patient who booked the slot"
    )
    patient_snapshot: Optional["PatientProfile"] = Field(
        default=None,
        description=(
            "Patient profile snapshot shared with the treating clinic when the slot is "
            "booked, based on explicit consent."
        ),
    )


class PatientProfile(BaseModel):
    """Minimal patient profile stored in the encrypted data store."""

    id: str
    email: EmailStr
    first_name: str
    last_name: str
    date_of_birth: date
    phone_number: str


class TreatmentNote(BaseModel):
    """Versioned treatment note written by medical staff."""

    version: int
    author: str
    created_at: datetime
    summary: str
    next_steps: Optional[str] = None


class PatientRecord(BaseModel):
    """Complete patient record stored per patient."""

    profile: PatientProfile
    appointments: List[AppointmentSlot] = Field(default_factory=list)
    treatment_notes: List[TreatmentNote] = Field(default_factory=list)
    consents: List[str] = Field(
        default_factory=list,
        description="Identifiers of facilities that currently have access to the record.",
    )


class AppointmentRequest(BaseModel):
    """Incoming booking request."""

    slot_id: str


class AppointmentConfirmation(BaseModel):
    """Response that confirms the booking."""

    appointment: AppointmentSlot
    facility: FacilitySummary
    confirmation_number: str


class TreatmentNoteRequest(BaseModel):
    """New treatment note payload."""

    author: str
    summary: str
    next_steps: Optional[str] = None


class ConsentRequest(BaseModel):
    """Request to share a patient record with another facility."""

    requester_facility_id: str
    grant: bool = Field(
        True,
        description="Whether the patient approves (True) or revokes (False) the consent.",
    )


class ShareStatus(BaseModel):
    """Current consent status for a given facility."""

    facility_id: str
    granted: bool
    updated_at: datetime


class AuditEvent(BaseModel):
    """Structured audit trail event."""

    id: str
    actor: str
    action: str
    patient_id: Optional[str]
    timestamp: datetime
    payload_hash: str


class UserRole(str, Enum):
    """Supported roles for fine-grained authorization."""

    patient = "patient"
    clinic_admin = "clinic_admin"
    provider = "provider"
    platform_admin = "platform_admin"


class UserPublicProfile(BaseModel):
    """Public representation of an authenticated user."""

    id: str
    email: EmailStr
    role: UserRole
    display_name: str
    facility_id: Optional[str] = None


class LoginRequest(BaseModel):
    """Credentials for issuing an authentication token."""

    email: EmailStr
    password: str


class AuthToken(BaseModel):
    """Returned session token and accompanying profile."""

    token: str
    user: UserPublicProfile


class PatientRegistration(BaseModel):
    """Payload to create a new patient account. The identifier is generated by the platform."""

    email: EmailStr
    password: str
    first_name: str
    last_name: str
    date_of_birth: date
    phone_number: str


class DepartmentCreate(BaseModel):
    """Incoming department definition."""

    name: str
    specialties: List[Specialty]


class FacilityRegistration(BaseModel):
    """Administrative payload to onboard a new facility and its lead user."""

    facility: FacilityCreate
    departments: Optional[List[DepartmentCreate]] = None
    owners: Optional[List[str]] = None
    admin_email: EmailStr
    admin_password: str
    admin_display_name: str


class FacilityRegistrationResponse(BaseModel):
    """Response payload when onboarding a new facility."""

    facility: FacilityDetail
    admin: UserPublicProfile


class ProviderRegistration(BaseModel):
    """Registration payload for a clinician tied to a facility."""

    facility_id: str
    department_id: Optional[str] = None
    email: EmailStr
    password: str
    display_name: str
    specialties: List[Specialty]


class SlotCreationRequest(BaseModel):
    """Payload for clinics to create new appointment slots."""

    start: datetime
    end: datetime
    is_virtual: bool = False
    provider_id: Optional[str] = None
    department_id: Optional[str] = None


class SlotUpdateRequest(BaseModel):
    """Payload for updating slot metadata."""

    start: Optional[datetime] = None
    end: Optional[datetime] = None
    is_virtual: Optional[bool] = None
    provider_id: Optional[str] = None
    department_id: Optional[str] = None


class RescheduleRequest(BaseModel):
    """Patient-initiated reschedule payload."""

    new_slot_id: str


class ProviderProfile(BaseModel):
    """Profile data returned for clinicians within a clinic."""

    id: str
    display_name: str
    email: EmailStr
    specialties: List[Specialty]
    facility_id: str
    department_id: Optional[str] = None


ClinicDepartment.model_rebuild()


class ClinicBooking(BaseModel):
    """Booking information surfaced to clinics with patient consent."""

    slot: AppointmentSlot
    patient: Optional[PatientProfile]


class FacilitySearchResult(BaseModel):
    """Result entry for facility discovery including upcoming availability."""

    facility: FacilityDetail
    next_slots: List[AppointmentSlot] = Field(default_factory=list)


class UserProfileUpdate(BaseModel):
    """Patch payload for updating user profile attributes."""

    display_name: Optional[str] = None
    phone_number: Optional[str] = None


class FacilityUpdate(BaseModel):
    """Patch payload for updating facility metadata."""

    contact_email: Optional[EmailStr] = None
    phone_number: Optional[str] = None
    street: Optional[str] = None
    city: Optional[str] = None
    postal_code: Optional[str] = None
    specialties: Optional[List[Specialty]] = None
    opening_hours: Optional[List[OpeningHours]] = None
    owners: Optional[List[str]] = None


FacilityDetail.model_rebuild()
